//z:[[x, 1], [1, 0]]
//z * z:
//    -> [[x, 1], [1, 0]] *  [[x, 1], [1, 0]]
//    -> [[x, 1] * [x, 1], [1, 0] * [x, 1] + [x, 1] * [1, 0]]]
//    -> [[x * x, 1 * x + x * 1], [1 * x, 1 * 1 + 0 * x] + [x * 1, x * 0 + 1 * 1]]
//    -> [[x * x, 2x], [x, 1] + [x, 1]]
//    -> [[x * x, 2x], [x + x, 1 + 1]]
//    -> [[x * x, 2x], [2x, 2]]
dual<dual<double> > f(dual<dual<double> > z)
{
    return z * z;
}
//y:[x, 1]
//f:
//    -> [[x * x, 2x], [2x, 2]]
dual<double> g(dual<double> y) {
    return f(dual<dual<double> >(y) + dual<dual<double> >::c());
}
//g:
//    -> [[x * x, 2x], [2x, 2]]
dual<double> a = g(dual<double>(x) + dual<double>::c());


//z:[[x, 1], [1, 0]]
//z * z * 2:
//    -> [[x, 1], [1, 0]] *  [[x, 1], [1, 0]] * 2
//    -> [[x, 1] * [x, 1], [1, 0] * [x, 1] + [x, 1] * [1, 0]]] * [2, 0]
//    -> [[x * x, 1 * x + x * 1], [1 * x, 1 * 1 + 0 * x] + [x * 1, x * 0 + 1 * 1]] * [2, 0]
//    -> [[x * x, 2x], [x, 1] + [x, 1]] * [2, 0]
//    -> [[x * x, 2x], [x + x, 1 + 1]] * [2, 0]
//    -> [[x * x, 2x], [2x, 2]] * [2, 0]
//    -> [[x * x, 2x] * 2, [2x, 2] * 0 + [2x, 2] * 2]
//    -> [[x * x, 2x] * [2, 0], [2x, 2] * [2, 0]]
//    -> [[x * x * 2, x * x * 0 + 2x * 2], [2x * 2, 2x * 0 + 2 * 2]]
//    -> [[x * x * 2, 4x], [4x, 4]]
dual<dual<double> > f(dual<dual<double> > z)
{
    return z * z * 2;
}
//y:[x, 1]
//f:
//    -> [[x * x * 2, 4x], [4x, 4]]
dual<double> g(dual<double> y) {
    return f(dual<dual<double> >(y) + dual<dual<double> >::c());
}
//x:[x,0]
//g:
//    -> [[x * x * 2, 4x], [4x, 4]]
dual<double> a = g(dual<double>(x) + dual<double>::c());


//z1:[[x1, (1,0)], ([1, (0,0)], [0, (0,0)])]
//z2:[[x2, (0,1)], ([0, (0,0)], [1, (0,0)])]
//    -> [[x1, (1,0)], ([1, (0,0)], [0, (0,0)])] * [[x2, (0,1)], ([0, (0,0)], [1, (0,0)])]
//    -> [[x1, (1,0)] * [x2, (0,1)], [x1, (1,0)]*([0, (0,0)], [1, (0,0)]) + [x2, (0,1)]*([1, (0,0)], [0, (0,0)])]
//    -> [[x1*x2, x1*(0,1) + (1,0)*x2], ([0, (0,0)],[x1, (1,0)]*[1, (0,0)]) + ([x2, (0,1)]*[1, (0,0)], [0, (0,0)])]
//    -> [[x1*x2, (0,x1*1) + (1*x2,0)], ([0, (0,0)],[x1*1, x1*(0,0) + (1,0)*1]) + ([x2*1, x2*(0,0) + (0,1)*1], [0, (0, 0)])]
//    -> [[x1*x2, (x2,x1)], ([0, (0,0)],[x1, (1,0)]) + ([x2, (0,1)], [0, (0,0)])]
//    -> [[x1*x2, (x2,x1)], ([0, (0,0)]+([x2, (0,1)],[x1, (1,0)])+[0, (0,0)])]
//    -> [[x1*x2, (x2,x1)], ([x2, (0,1)],[x1, (1,0)])]
dual<dual<double> > f(dual<dual<double> > z1, dual<dual<double> > z2)
{
    return z1 * z2;
}
//y1:[x1, (1,0)]
//y2:[x2, (0,1)]
//    -> [[x1*x2, (x2,x1)], ([x2, (0,1)],[x1, (1,0)])]
dual<double> g(dual<double> y1, dual<double> y2) {
    return f(dual<dual<double> >(y1) + dual<dual<double> >::c1(), dual<dual<double> >(y2) + dual<dual<double> >::c2());
}
//x[x,(0,0)]
//g:
//    -> [[x1*x2, (x2,x1)], ([x2, (0,1)],[x1, (1,0)])]
dual<double> a = g(dual<double>(x1) + dual<double>::c1(), dual<double>(x2) + dual<double>::c2());

//z1:[[x1, (1,0)], ([1, (0,0)], [0, (0,0)])]
//z2:[[x2, (0,1)], ([0, (0,0)], [1, (0,0)])]
//    -> [[x1, (1,0)], ([1, (0,0)], [0, (0,0)])] * [[x1, (1,0)], ([1, (0,0)], [0, (0,0)])] * 2
//    -> [[x1, (1,0)] * [x1, (1,0)], [x1, (1,0)]*([1, (0,0)], [0, (0,0)]) + ([1, (0,0)], [0, (0,0)])*[x1, (1,0)]] * [2, (0,0)]
//    -> [[x1*x1, x1*(1,0) + (1,0)*x1], ([x1, (1,0)]*[1, (0,0)],[x1, (1,0)]*[0, (0,0)]) + ([1, (0,0)]*[x1, (1,0)],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (x1*1,0) + (1*x1,0)], ([x1*1, x1*(0,0) + (1,0)*1],[0, (0,0)]) + ([1*x1, 1*(1,0)+(0,0)*x1],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)], ([x1, (0,0) + (1,0)],[0, (0,0)]) + ([x1, (1,0)+(0,0)],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)], ([x1, (1,0)],[0, (0,0)]) + ([x1, (1,0)],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)], ([x1, (1,0)]+[x1, (1,0)],[0, (0,0)]+[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)], ([x1+x1, (1,0)+(1,0)],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)], ([2x1, (2,0)],[0, (0,0)])] * [2, (0,0)]
//    -> [[x1*x1, (2x1,0)]*2, [x1*x1, (2x1,0)]*(0,0) + ([2x1, (2,0)],[0, (0,0)])*2]
//    -> [[x1*x1, (2x1,0)]*[2, (0,0)], ([2x1, (2,0)]*2,[0, (0,0)]*2)]
//    -> [[x1*x1*2, x1*x1*(0,0) + (2x1,0)*2], ([2x1, (2,0)]*[2,(0,0)],[0, (0,0)])]
//    -> [[x1*x1*2, (2x1*2,0*2)], ([2x1*2, 2x1*(0,0) + (2,0)*2],[0, (0,0)])]
//    -> [[x1*x1*2, (4x1,0)], ([4x1, (4,0)],[0, (0,0)])]
dual<dual<double> > f(dual<dual<double> > z1, dual<dual<double> > z2)
{
    return z1 * z1 * 2;
}
//y1:[x1, (1,0)]
//y2:[x2, (0,1)]
//    -> [[x1*x1*2, (4x1,0)], ([4x1, (4,0)],[0, (0,0)])]
dual<double> g(dual<double> y1, dual<double> y2) {
    return f(dual<dual<double> >(y1) + dual<dual<double> >::c1(), dual<dual<double> >(y2) + dual<dual<double> >::c2());
}
//x[x,(0,0)]
//g:
//    -> [[x1*x1*2, (4x1,0)], ([4x1, (4,0)],[0, (0,0)])]
dual<double> a = g(dual<double>(x1) + dual<double>::c1(), dual<double>(x2) + dual<double>::c2());




//(a + bd1+0d2) + (e + 0d1 + fd2) = (a+e)+(

// [x1, [0, 0], [0, 0]]

